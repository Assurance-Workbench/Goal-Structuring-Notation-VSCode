/* eslint @typescript-eslint/no-var-requires: "off" */
const ElkConstructor = require('elkjs/lib/elk.bundled.js').default;
import { inject, Module } from 'langium';
import { createDefaultModule, createDefaultSharedModule, PartialLangiumServices, DefaultSharedModuleContext } from 'langium/lsp';
import { LangiumSprottyServices, LangiumSprottySharedServices, SprottyDefaultModule, SprottyDiagramServices, SprottySharedModule } from 'langium-sprotty';
import { DefaultElementFilter, ElkFactory, ElkLayoutEngine, IElementFilter, ILayoutConfigurator } from 'sprotty-elk/lib/elk-layout.js';
import { GsnDiagramGenerator } from './diagram-generator.js';
import { GSNGeneratedModule, GSNGeneratedSharedModule } from './generated/module.js';
import { GsnLayoutConfigurator } from './layout-config.js';
import { registerValidationChecks, GsnValidator } from './gsn-validator.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type GsnAddedServices = {
    validation: {
        GsnValidator: GsnValidator
    },
    layout: {
        ElkFactory: ElkFactory,
        ElementFilter: IElementFilter,
        LayoutConfigurator: ILayoutConfigurator
    }
};

/**
 * Union of Langium default services and custom services.
 */
export type GsnServices = LangiumSprottyServices & GsnAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. 
 */
export const GsnModule: Module<GsnServices, PartialLangiumServices & SprottyDiagramServices & GsnAddedServices> = {
    diagram: {
        DiagramGenerator: services => new GsnDiagramGenerator(services),
        ModelLayoutEngine: services => new ElkLayoutEngine(services.layout.ElkFactory, services.layout.ElementFilter, services.layout.LayoutConfigurator) as any
    },
    validation: {
        GsnValidator: () => new GsnValidator()
    },
    layout: {
        ElkFactory: () => () => new ElkConstructor({ algorithms: ['layered'] }),
        ElementFilter: () => new DefaultElementFilter,
        LayoutConfigurator: () => new GsnLayoutConfigurator
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createGsnServices(context: DefaultSharedModuleContext): {
    shared: LangiumSprottySharedServices,
    gsnServices: GsnServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        GSNGeneratedSharedModule,
        SprottySharedModule
    );
    const gsn = inject(
        createDefaultModule({ shared }),
        GSNGeneratedModule,
        SprottyDefaultModule,
        GsnModule
    );
    registerValidationChecks(gsn);
    shared.ServiceRegistry.register(gsn);
    return { shared, gsnServices: gsn };
}
